{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = function (a0, a1) {\n  return {\n    \"start\": a0,\n    \"end\": a1\n  };\n};\nfunction GridComponent_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\", 5);\n    i0.ÉµÉµtext(1);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const cell_r4 = ctx.$implicit;\n    const j_r5 = ctx.index;\n    const i_r2 = i0.ÉµÉµnextContext().index;\n    const ctx_r3 = i0.ÉµÉµnextContext();\n    i0.ÉµÉµproperty(\"ngClass\", i0.ÉµÉµpureFunction2(2, _c0, i_r2 === 0 && j_r5 === 0, i_r2 === ctx_r3.rows - 1 && j_r5 === ctx_r3.cols - 1));\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµtextInterpolate1(\" \", cell_r4, \" \");\n  }\n}\nfunction GridComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\", 3);\n    i0.ÉµÉµtemplate(1, GridComponent_div_1_div_1_Template, 2, 5, \"div\", 4);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµproperty(\"ngForOf\", row_r1);\n  }\n}\nexport class GridComponent {\n  constructor() {\n    this.grid = [];\n    this.rows = 10;\n    this.cols = 10;\n    this.initializeGrid();\n  }\n  initializeGrid() {\n    this.grid = Array.from({\n      length: this.rows\n    }, () => Array(this.cols).fill(1));\n  }\n  visualizeDijkstra() {\n    // Implement Dijkstra's algorithm here\n    // Update the grid to reflect the shortest path\n    const start = [0, 0];\n    const end = [this.rows - 1, this.cols - 1];\n    const visited = Array.from({\n      length: this.rows\n    }, () => Array(this.cols).fill(false));\n    const distance = Array.from({\n      length: this.rows\n    }, () => Array(this.cols).fill(Infinity));\n    const previous = Array.from({\n      length: this.rows\n    }, () => Array(this.cols).fill(null));\n    distance[start[0]][start[1]] = 0;\n    const unvisited = [[...start]];\n    while (unvisited.length > 0) {\n      // Find the node with the smallest distance\n      const [currentRow, currentCol] = unvisited.pop();\n      if (visited[currentRow][currentCol]) continue;\n      visited[currentRow][currentCol] = true;\n      // Check neighbors\n      const neighbors = [[currentRow - 1, currentCol], [currentRow + 1, currentCol], [currentRow, currentCol - 1], [currentRow, currentCol + 1]];\n      for (const [neighborRow, neighborCol] of neighbors) {\n        if (neighborRow >= 0 && neighborRow < this.rows && neighborCol >= 0 && neighborCol < this.cols && !visited[neighborRow][neighborCol]) {\n          const alt = distance[currentRow][currentCol] + 1;\n          if (alt < distance[neighborRow][neighborCol]) {\n            distance[neighborRow][neighborCol] = alt;\n            previous[neighborRow][neighborCol] = [currentRow, currentCol];\n            unvisited.push([neighborRow, neighborCol]);\n          }\n        }\n      }\n    } // Reconstruct the shortest path\n    let path = [];\n    let current = end;\n    while (current) {\n      path.unshift(current);\n      current = previous[current[0]][current[1]];\n    }\n    // Update the grid to reflect the path\n    for (const [row, col] of path) {\n      this.grid[row][col] = 2;\n    }\n  }\n  static {\n    this.Éµfac = function GridComponent_Factory(t) {\n      return new (t || GridComponent)();\n    };\n  }\n  static {\n    this.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n      type: GridComponent,\n      selectors: [[\"app-grid\"]],\n      decls: 5,\n      vars: 1,\n      consts: [[1, \"grid\"], [\"class\", \"row\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"row\"], [\"class\", \"cell\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"cell\", 3, \"ngClass\"]],\n      template: function GridComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ÉµÉµelementStart(0, \"div\", 0);\n          i0.ÉµÉµtemplate(1, GridComponent_div_1_Template, 2, 1, \"div\", 1);\n          i0.ÉµÉµelementEnd();\n          i0.ÉµÉµtext(2, \" \\uD83C\\uDFA8 \");\n          i0.ÉµÉµelementStart(3, \"button\", 2);\n          i0.ÉµÉµlistener(\"click\", function GridComponent_Template_button_click_3_listener() {\n            return ctx.visualizeDijkstra();\n          });\n          i0.ÉµÉµtext(4, \"Visualize Dijkstra\");\n          i0.ÉµÉµelementEnd();\n        }\n        if (rf & 2) {\n          i0.ÉµÉµadvance(1);\n          i0.ÉµÉµproperty(\"ngForOf\", ctx.grid);\n        }\n      },\n      dependencies: [i1.NgClass, i1.NgForOf],\n      styles: [\".grid[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-rows: repeat(10, 30px);\\n  grid-template-columns: repeat(10, 30px);\\n  gap: 1px;\\n}\\n.row[_ngcontent-%COMP%] {\\n  display: contents;\\n}\\n.cell[_ngcontent-%COMP%] {\\n  width: 30px;\\n  height: 30px;\\n  background-color: lightgray;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\nstart[_ngcontent-%COMP%] {\\n    background-color: green;\\n  }\\n  \\n  .end[_ngcontent-%COMP%] {\\n    background-color: red;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9ncmlkL2dyaWQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7RUFDRSxhQUFhO0VBQ2Isb0NBQW9DO0VBQ3BDLHVDQUF1QztFQUN2QyxRQUFRO0FBQ1Y7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWiwyQkFBMkI7RUFDM0IsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7QUFDQTtJQUNJLHVCQUF1QjtFQUN6Qjs7RUFFQTtJQUNFLHFCQUFxQjtFQUN2QiIsInNvdXJjZXNDb250ZW50IjpbIlxuLmdyaWQge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgMzBweCk7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAzMHB4KTtcbiAgZ2FwOiAxcHg7XG59XG4ucm93IHtcbiAgZGlzcGxheTogY29udGVudHM7XG59XG4uY2VsbCB7XG4gIHdpZHRoOiAzMHB4O1xuICBoZWlnaHQ6IDMwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5zdGFydCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XG4gIH1cbiAgXG4gIC5lbmQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbiAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["i0","GridComponent","constructor","initializeGrid","grid","Array","from","length","rows","cols","fill","visualizeDijkstra","start","end","visited","distance","Infinity","previous","unvisited","currentRow","currentCol","pop","neighbors","neighborRow","neighborCol","alt","push","path","current","unshift","row","col","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/shantanu/Documents/meimalai/dijkstra-visualizer/src/app/components/grid/grid.component.html","/Users/shantanu/Documents/meimalai/dijkstra-visualizer/src/app/components/grid/grid.component.ts"],"sourcesContent":["<div class=\"grid\">\n    <div *ngFor=\"let row of grid; let i = index\" class=\"row\">\n      <div *ngFor=\"let cell of row; let j = index\" \n  class=\"cell\" [ngClass]=\"{'start': i === 0 && j === 0, 'end': i === rows - 1 \n  && j === cols - 1}\">\n        {{ cell }}\n      </div>\n    </div>\n  </div>\n  ðŸŽ¨\n\n  <button (click)=\"visualizeDijkstra()\">Visualize Dijkstra</button>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.css']\n})\nexport class GridComponent {\n  \n    grid: number[][] = [];\n    rows: number = 10;\n    cols: number = 10;\n    constructor() {\n      this.initializeGrid();\n    }\n    initializeGrid(): void {\n      this.grid = Array.from({ length: this.rows }, () => Array(this.cols).fill(1));\n    }\n    visualizeDijkstra(): void {\n      // Implement Dijkstra's algorithm here\n      // Update the grid to reflect the shortest path\n      const start = [0, 0];\n      const end = [this.rows - 1, this.cols - 1];\n      const visited = Array.from({ length: this.rows }, () => Array(this.cols).fill(false));\n      const distance = Array.from({ length: this.rows }, () => Array(this.cols).fill(Infinity));\n      const previous = Array.from({ length: this.rows }, () => Array(this.cols).fill(null));\n    \n      distance[start[0]][start[1]] = 0;\n    \n      const unvisited = [[...start]];while (unvisited.length > 0) {\n        // Find the node with the smallest distance\n        const [currentRow, currentCol] = unvisited.pop()!;\n        if (visited[currentRow][currentCol]) continue;\n    \n        visited[currentRow][currentCol] = true;\n    \n        // Check neighbors\n        const neighbors = [\n          [currentRow - 1, currentCol],\n          [currentRow + 1, currentCol],\n          [currentRow, currentCol - 1],\n          [currentRow, currentCol + 1]\n        ];\n    \n        for (const [neighborRow, neighborCol] of neighbors) {\n          if (\n            neighborRow >= 0 && neighborRow < this.rows &&\n            neighborCol >= 0 && neighborCol < this.cols &&\n            !visited[neighborRow][neighborCol]\n          ) {\n            const alt = distance[currentRow][currentCol] + 1;\n            if (alt < distance[neighborRow][neighborCol]) {\n              distance[neighborRow][neighborCol] = alt;\n              previous[neighborRow][neighborCol] = [currentRow, currentCol];\n              unvisited.push([neighborRow, neighborCol]);\n            }\n          }\n        }\n          }// Reconstruct the shortest path\n        let path = [];\n        let current = end;\n        while (current) {\n          path.unshift(current);\n          current = previous[current[0]][current[1]];\n        }\n\n        // Update the grid to reflect the path\n        for (const [row, col] of path) {\n          this.grid[row][col] = 2;\n        }\n      }\n  }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}